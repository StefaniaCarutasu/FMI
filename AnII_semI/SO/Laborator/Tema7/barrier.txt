#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include <errno.h>

#include <sys/types.h>
#include <pthread.h>
#include <semaphore.h>


pthread_mutex_t mtx; //declar un mutex
sem_t sem; //declar un semafor
const int n = 5;
int contor; //cu variabila contor voi contoriza cate thread uri asteapta la barrier_point

pthread_t thr[10]; //vector de thread uri

int barrier_point()
{
    pthread_mutex_lock(&mtx); //blochez mutex-ul
    contor++;
    pthread_mutex_unlock(&mtx); //deblochez mutex-ul

    if(contor < n)
    {
        if (sem_wait( &sem)) //nu permit executia daca nu sunt toate cele n thread-uri la bariera
        {
            perror(NULL);
            return errno;
        }
    }
    else
    {
        for(int i = 0; i < n - 1; i++)
        {
            if(sem_post( &sem ))
            {
                perror(NULL);
                return errno;
            }
        }
    }
    
}

void *tfun(void *v)
{
    int tid = *(int *) v;

    printf("%d reached the barrier!\n", tid);
    barrier_point();
    printf("%d passed the barrier!\n", tid);

    return NULL;
}

int main()
{
    if(pthread_mutex_init(&mtx, NULL)) //initializez mutex-ul
    {
        perror(NULL);
        return errno;
    }

    if(sem_init(&sem, 0, 0)) //initializez semaforul
    {
        perror(NULL);
        return errno;
    }

    for (int i = 0; i < n; i++)
    {
        pthread_create(&thr[i], NULL, tfun, &i);
    }

    for(int i = 0; i < n; i++) //reunesc thread urile cu thread ul principal
    {
        if(pthread_join(thr[i], NULL))
        {
            perror(NULL);
            return errno;
        }
    }

    pthread_mutex_destroy(&mtx); //distrug mutex-ul
    sem_destroy(&sem); //distrug semaforul

    return 0;
    
}